name: vLLM Auto Rebase (amd64)

on:
  # schedule:
  #   - cron: "*/30 * * * *"
  workflow_dispatch:
    inputs:
      force_tag:
        description: "手动指定上游 tag (例: v0.9.2, v0.5.4-cu124)"
        required: false
        type: string

env:
  SOURCE_IMAGE: vllm/vllm-openai
  PLATFORM: linux/amd64
  TARGET_IMAGE_GHCR: ghcr.io/${{ github.repository_owner }}/vllm-openai-secure
  TARGET_IMAGE_DH: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/vllm-openai-secure

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.out.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine pending tags
        id: out
        shell: bash
        run: |
          set -euo pipefail

          # 1) 手动触发优先
          if [[ -n "${{ github.event.inputs.force_tag || '' }}" ]]; then
            echo "tags=[\"${{ github.event.inputs.force_tag }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 2) 拉取上游 tags（Docker Hub 公共 API）
          tags=$(curl -fsSL "https://registry.hub.docker.com/v2/repositories/${SOURCE_IMAGE}/tags?page_size=100" \
                  | jq -r '.results[].name')

          # 3) 过滤你关心的模式
          tags=$(printf "%s\n" "$tags" | grep -E '^(v?[0-9]+\.[0-9]+(\.[0-9]+)?|.*cuda.*|.*rocm.*|latest)$' || true)

          # 4) 跳过 GHCR 或 Docker Hub 已存在的 tag（任一存在即跳过）
          pending=()
          while IFS= read -r t; do
            skip=false
            if docker buildx imagetools inspect "${{ env.TARGET_IMAGE_GHCR }}:${t}" >/dev/null 2>&1; then skip=true; fi
            if docker buildx imagetools inspect "${{ env.TARGET_IMAGE_DH }}:${t}"   >/dev/null 2>&1; then skip=true; fi
            if [[ "$skip" == "false" ]]; then pending+=("$t"); fi
          done < <(printf "%s\n" "$tags")

          printf 'tags=%s\n' "$(printf '%s\n' "${pending[@]}" | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT

  build-and-push:
    needs: discover
    if: ${{ needs.discover.outputs.tags != '' && needs.discover.outputs.tags != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
  
      - name: Free disk space (aggressive)
        shell: bash
        run: |
          set -euxo pipefail
          echo "== Before cleanup =="; df -h || true

          # 常见大头
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo rm -rf /opt/hostedtoolcache || true
          sudo rm -rf /usr/local/.ghcup || true
          sudo rm -rf /usr/local/lib/node_modules || true
          sudo rm -rf $HOME/.cache || true

          # CodeQL / Actions 诊断缓存等
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /home/runner/work/_temp/_github_home || true
          sudo rm -rf /home/runner/work/_temp/_github_workflow || true

          # Docker 清理（先确保 daemon 起着）
          docker system prune -af --volumes || true

          echo "== After cleanup =="; df -h || true
  
      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Compute namespaces (lowercase)
        id: ns
        shell: bash
        run: |
          echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT
          echo "dh_ns=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          
      - name: Build and push to GHCR + Docker Hub (amd64)
        shell: bash
        env:
          TAGS_JSON: ${{ needs.discover.outputs.tags }}
          OWNER_LC: ${{ steps.ns.outputs.owner_lc }}
          DH_NS: ${{ steps.ns.outputs.dh_ns }}
        run: |
          set -euo pipefail
          for tag in $(echo "$TAGS_JSON" | jq -r '.[]'); do
            ghcr="ghcr.io/${OWNER_LC}/vllm-openai-secure:${tag}"
            ghcr_r="ghcr.io/${OWNER_LC}/vllm-openai-secure:${tag}-r${{ github.run_number }}"
            dh="docker.io/${DH_NS}/vllm-openai-secure:${tag}"
            dh_r="docker.io/${DH_NS}/vllm-openai-secure:${tag}-r${{ github.run_number }}"
  
            echo "==> Building ${tag} ->"
            echo "    ${ghcr}"
            echo "    ${dh}"
  
            docker buildx build \
              --platform linux/amd64 \
              --file docker/Dockerfile \
              --build-arg BASE_IMAGE="${SOURCE_IMAGE}" \
              --build-arg BASE_TAG="${tag}" \
              --tag "${ghcr}" --tag "${ghcr_r}" \
              --tag "${dh}"   --tag "${dh_r}" \
              --provenance=false \
              --push \
              .
  
            echo "Pushed OK:"
            echo "  ${ghcr}"
            echo "  ${dh}"
          done

