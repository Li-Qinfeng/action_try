name: vLLM Auto Rebase (amd64)

on:
  schedule:
    - cron: "*/30 * * * *"            # 每 30 分钟扫描一次，可改
  workflow_dispatch:
    inputs:
      force_tag:
        description: "手动指定上游 tag (例: v0.9.2, v0.5.4-cu124)"
        required: false
        type: string

env:
  SOURCE_IMAGE: vllm/vllm-openai
  TARGET_IMAGE: ghcr.io/${{ github.repository_owner }}/vllm-openai-secure
  PLATFORM: linux/amd64

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.out.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine pending tags
        id: out
        shell: bash
        run: |
          set -euo pipefail

          # 1) 手动触发优先
          if [[ -n "${{ github.event.inputs.force_tag || '' }}" ]]; then
            echo "tags=[\"${{ github.event.inputs.force_tag }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 2) 拉取上游 tags（Docker Hub 公共 API）
          tags=$(curl -fsSL "https://registry.hub.docker.com/v2/repositories/${SOURCE_IMAGE}/tags?page_size=100" \
                  | jq -r '.results[].name')

          # 3) 过滤你关心的模式（需要可自行调整）
          tags=$(printf "%s\n" "$tags" | grep -E '^(v?[0-9]+\.[0-9]+(\.[0-9]+)?|.*cuda.*|.*rocm.*|latest)$' || true)

          # 4) 跳过目标仓库已存在的 tag（避免重复发布）
          pending=()
          while IFS= read -r t; do
            if docker buildx imagetools inspect "${TARGET_IMAGE}:${t}" >/dev/null 2>&1; then
              continue
            fi
            pending+=("$t")
          done < <(printf "%s\n" "$tags")

          printf 'tags=%s\n' "$(printf '%s\n' "${pending[@]}" | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT

  build-and-push:
    needs: discover
    if: ${{ needs.discover.outputs.tags != '' && needs.discover.outputs.tags != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # 推 GHCR 需要
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (optional for consistency)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push all pending tags (amd64 only)
        shell: bash
        env:
          TAGS_JSON: ${{ needs.discover.outputs.tags }}
        run: |
          set -euo pipefail
          for tag in $(echo "$TAGS_JSON" | jq -r '.[]'); do
            echo "==> Building ${tag} for ${PLATFORM}"

            docker buildx build \
              --platform "${PLATFORM}" \
              --file docker/Dockerfile \
              --build-arg BASE_IMAGE="${SOURCE_IMAGE}" \
              --build-arg BASE_TAG="${tag}" \
              --tag "${TARGET_IMAGE}:${tag}" \
              --tag "${TARGET_IMAGE}:${tag}-r${{ github.run_number }}" \
              --provenance=false \
              --cache-from "type=registry,ref=${TARGET_IMAGE}:cache" \
              --cache-to   "type=registry,ref=${TARGET_IMAGE}:cache,mode=max" \
              --push \
              .

            echo "Pushed: ${TARGET_IMAGE}:${tag}"
          done
